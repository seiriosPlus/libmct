This file only lists changes in stable version.  Changes in
intermediate development versions are merged into the next stable.


=== New in MCT 1.6.2 (27 July 2013) ==================================

* Adapted to renaming of standard trait from 'has_trivial_destructor'
  to 'is_trivially_destructible' in final C++11 standard.  This
  prevented MCT C++0x mode from working on non-GCC compilers.

* Fixed a few other potentional compilation errors.

* Fixed build systems once more, this time for libpthread on systems
  that need it.

* Silenced a warning in GCC 4.8.


--- New in MCT 1.6.1 (22 December 2012) ------------------------------

* Fixed custom pointer support: no longer crashes with certain
  versions of Boost.Interprocess.

* Several fixes to let MCT compile fine on Visual C++ 2008.

* Fixed and improved build systems (both SCons and Make based).  In
  particular, tests should now compile fine on systems where librt is
  needed for Boost.Interprocess.

* Minor fix: cross-container operator != works for the same arguments
  as operator == (was too strict).


--- New in MCT 1.6.0 (09 June 2012) ----------------------------------

* Containers support allocators that use custom pointers, most
  importantly Boost.Interprocess allocators.  (But see disclaimer in
  README about Interprocess < 1.48.)

* Containers can be serialized with Boost.Serialization, if the
  library is installed.

* Linked and forward hash tables now have sort() function.

* A number of public type properties, like mct::is_set or
  mct::is_closed, to help with template metaprogramming.

* MCT can be configured, tested and installed with GNU Make (but SCons
  remains the primary build tool).

* Numbers of tests:
  - basic: 1736 [*]
  - with C++0x support: 2070 [*]
  - with Boost.Interprocess >= 1.48: 2075 [*]
  - with C++0x support and Boost.Interprocess >= 1.48: 2449 [*]

  [*] in all cases there are 10 more tests if Boost.Serialization is
      available.


=== New in MCT 1.4.1 (30 July 2011) ==================================

* Only for C++0x: move assignment and constructor now fully conform to
  requirements in the standard (draft).  Fixed deviations could result
  in a crash with GCC 4.6 std::stable_sort(), for example.

* 1666 tests (2000 in C++0x mode).

--- New in MCT 1.4.0 (14 July 2011) ----------------------------------

* Empty hash tables don't allocate internal array right away.

* On certain architectures (notably x86-64) linked and forward hash
  tables use considerably less memory, up to 50% less for sets of
  integers.  As a theoretical downside, bucket count is limited to
  roughly 1 billion; refer to the manual if this is important for you.

* Closed and linked hash tables gained quick_erase() function.

* It is possible to compare certain compatible hash tables,
  e.g. closed_hash_set <int> with linked_hash_set <int>.

* New mct::internal_storage is used to automatically switch to a more
  efficient implementation in some cases, mostly in maps.

* Improved mct::extern_use_field now also supports functionality of
  mct::propagate_external_use; the latter is therefore deprecated.

* Installed MCT no longer depends on CPU architecture.

* Documentation lists complexity for all functions.

* 1666 tests (1959 with C++0x support).


=== New in MCT 1.2.1 (4 July 2011) ===================================

* Fix a bug that prevented any maps (not sets) with types that had
  external use specification from working.

* Minor documentation and build system improvements.

* 1116 tests (1292 on C++0x compilers).


--- New in MCT 1.2.0 (26 February 2011) ------------------------------

* Two more hash table containers:
  - forward_hash_set
  - forward_hash_map

* Intrusiveness functionality, when supported by elements, improves
  performance further.

* Works on Clang 2.7 or later.

* Documentation expanded for the new functionality.

* 1060 tests (1232 in C++0x mode).


=== New in MCT 1.0.0  (22 June 2010) =================================

* Four general-purpose hash table containers:
  - closed_hash_set
  - closed_hash_map
  - linked_hash_set
  - linked_hash_map

* Support for C++0x features on conforming compilers.

* Three optional debugging modes, including two automatic.

* Full documentation.

* Two benchmark families with comparison to other notable
  implementations.

* 445 tests (511 on C++0x).
